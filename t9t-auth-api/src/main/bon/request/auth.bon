/*
 * Copyright (c) 2012 - 2025 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.*
import api.media.*
import t9t.base.types.*
import t9t.base.api.*
import t9t.base.entities.*
import t9t.base.crud.*
import t9t.base.request.*
import t9t.base.search.*
import t9t.base.output.*
import t9t.auth.*

package (com.arvatosystems) t9t.auth.request {
    default private unsigned trim noControlChars;

    /** Standard CRUD and search requests... */
    class AuthModuleCfgCrudRequest              extends CrudModuleCfgRequest    <AuthModuleCfgDTO> {}
    class AuthModuleCfgSearchRequest            extends SearchRequest           <AuthModuleCfgDTO, FullTrackingWithVersion> {}

    class TenantLogoCrudRequest                 extends CrudModuleCfgRequest    <TenantLogoDTO> {}
    class TenantLogoSearchRequest               extends SearchRequest           <TenantLogoDTO, FullTrackingWithVersion> {}

    class RoleCrudRequest                       extends CrudSurrogateKeyRequest <RoleRef, RoleDTO, FullTrackingWithVersion> {}
    class RoleSearchRequest                     extends SearchRequest           <RoleDTO, FullTrackingWithVersion> {}
    class LeanRoleSearchRequest                 extends LeanSearchRequest {}
    class RoleCountRequest                      extends CountRequest {}

    class UserCrudRequest                       extends CrudSurrogateKeyRequest <UserRef, UserDTO, FullTrackingWithVersion> {}
    class UserSearchRequest                     extends SearchRequest           <UserDTO, FullTrackingWithVersion> {}
    class LeanUserSearchRequest                 extends LeanSearchRequest {}
    class UserCountRequest                      extends CountRequest {}

    class TenantCrudRequest                     extends CrudStringKeyRequest    <TenantDTO, FullTrackingWithVersion> {}
    class TenantSearchRequest                   extends SearchRequest           <TenantDTO, FullTrackingWithVersion> {}


    class UserTenantRoleCrudRequest             extends CrudCompositeKeyRequest <UserTenantRoleRef, UserTenantRoleDTO, FullTrackingWithVersion> {}
    class UserTenantRoleSearchRequest           extends SearchRequest           <UserTenantRoleDTO, FullTrackingWithVersion> {}

    class RoleToPermissionCrudRequest           extends CrudCompositeKeyRequest <RoleToPermissionRef, RoleToPermissionDTO, FullTrackingWithVersion> {}
    class RoleToPermissionSearchRequest         extends SearchRequest           <RoleToPermissionDTO, FullTrackingWithVersion> {}

    class ApiKeyCrudRequest                     extends CrudSurrogateKeyRequest <ApiKeyRef, ApiKeyDTO, FullTrackingWithVersion> {}
    class ApiKeySearchRequest                   extends SearchRequest           <ApiKeyDTO, FullTrackingWithVersion> {}

    class SessionSearchRequest                  extends SearchRequest           <SessionDTO, SessionTracking> {}

    /** Special request (admin only) which creates or updates a user and sets a specified password (or updates it to it).
     * Only allows the CREATE and MERGE operations.
     * The implementation performs the regular CRUD, followed by a set password.
     * This implementation does not initiate an email.
     */
    class UserCrudAndSetPasswordRequest         extends CrudSurrogateKeyRequest <UserRef, UserDTO, FullTrackingWithVersion> {
        required Unicode(32)                                password;                   // password
    }

    class PasswordBlacklistCrudRequest          extends CrudStringKeyRequest    <PasswordBlacklistDTO, NoTracking> {}
    class PasswordBlacklistSearchRequest        extends SearchRequest           <PasswordBlacklistDTO, NoTracking> {}

    class ClearPasswordBlacklistRequest extends RequestParameters {}

    class SetDefaultScreenRequest               extends RequestParameters return ServiceResponse {
        optional Unicode(64)                                defaultScreenId;
    }

    class GetDefaultScreenRequest               extends RequestParameters return GetDefaultScreenResponse {
    }

    class GetDefaultScreenResponse              extends ServiceResponse {
        optional Unicode(64)                                defaultScreenId;
    }

    /**
     * Retrieves the requirements for a new password for this user.
     * The current implementation will return settings which are configured at tenant level in AuthModuleCfgDTO,
     * but the service could be overridden to return stricter requirements for users with admin permissions.
     */
    class GetPasswordChangeRequirementsRequest            extends RequestParameters return GetPasswordChangeRequirementsResponse {}

    class GetPasswordChangeRequirementsResponse          extends ServiceResponse {
        required int                                passwordDifferPreviousN;    // from how many previous passwords must this one be different? (default 3)
        required int                                passwordMinimumLength;      // minimum length for a password in characters (default 10)
        required int                                passwordMinDigits;          // how many digits must be part of the password?
        required int                                passwordMinLetters;         // how many letters (upper + lower case) must be part of the password?
        required int                                passwordMinOtherChars;      // how many special characters must be part of the password?
        required int                                passwordMinUppercase;       // how many uppercase letters must be part of the password?
        required int                                passwordMinLowercase;       // how many lowercase letters must be part of the password?
        required int                                passwordMaxCommonSubstring; // how many identical substring characters found in the password are allowed?
    }
}
