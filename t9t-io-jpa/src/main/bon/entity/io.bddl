/*
 * Copyright (c) 2012 - 2023 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import t9t.setups.*
import t9t.base.entities.*
import t9t.io.*

// entries are sorted such that references only go to entities listed before.

package (com.arvatosystems) t9t.io.jpa.entities owner fortytwo prefix p28 {
    fields private;

    entity CsvConfigurationEntity category cfg is CsvConfigurationDTO {
        cacheable
        tenantClass InternalTenantId
        pk (objectRef)
        index unique (tenantId, csvConfigurationId)
    }

    entity DataSinkEntity category cfg is DataSinkDTO tablename p42_cfg_data_sinks historytablename p42_his_data_sinks {
        cacheable
        tenantClass InternalTenantId
        pk (objectRef)
        index unique (tenantId, dataSinkId)
        @ManyToOne CsvConfigurationEntity csvConfiguration LAZY for (csvConfigurationRef)
        @ManyToOne DataSinkEntity         responseDataSink LAZY for (responseDataSinkRef)
        //@ManyToOne AsyncChannelEntity     asyncChannel     LAZY for (csvConfigurationRef)
    }

    entity SinkEntity category datv is SinkDTO tablename p42_dat_sinks {
        tenantClass InternalTenantId
        pk (objectRef)
        index (dataSinkRef, tenantId, cTimestamp)
        index (camelTransferStatus) where notNull
        index (fileOrQueueName, tenantId)
        @ManyToOne DataSinkEntity dataSink LAZY for (dataSinkRef)
    }

    entity OutboundMessageEntity category ^int is OutboundMessageDTO tablename p42_int_outbound_messages {
        tenantClass InternalTenantId
        pk (objectRef)
        index unique (sinkRef, mappedRecordNo)
//        @ManyToOne SinkEntity sink LAZY for (sinkRef)
    }

    entity AsyncQueueEntity category cfg is AsyncQueueDTO {
        cacheable
        tenantClass InternalTenantId
        pk (objectRef)
        index unique (tenantId, asyncQueueId)
    }

    entity AsyncChannelEntity category cfg is AsyncChannelDTO {
        cacheable
        tenantClass InternalTenantId
        pk (objectRef)
        index unique (tenantId, asyncChannelId)
        @ManyToOne AsyncQueueEntity asyncQueue LAZY for (asyncQueueRef)
    }

    entity AsyncMessageEntity category ^int is AsyncMessageDTO tablename p42_int_async_messages {
        tenantClass InternalTenantId
        pk (objectRef)
        index (status)        where notNull
        index (cTimestamp)
        index (ref)           where notNull
        index (refIdentifier) where notNull
        @ManyToOne AsyncQueueEntity asyncQueue LAZY for (asyncQueueRef)
    }

    entity AsyncMessageStatisticsEntity category datnt is AsyncMessageStatisticsDTO {
        tenantClass InternalTenantId
        pk (objectRef)
        index unique (tenantId, slotStart, asyncChannelId, refType, status, httpResponseCode)
    }
}
