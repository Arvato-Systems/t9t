/*
 * Copyright (c) 2012 - 2023 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.*
import apiw.*
import t9t.base.types.*
import t9t.base.api.*
import t9t.base.entities.*

/** Data types which are relevant for stored entities on the database, such as auditing data related.
 * All DTOs in this package are final, because Customization is not supported for them (they are needed before we have the environment
 * for customization built).
 *
 * <p>
 * The following RTTIs are define here:
 * <li> 1 - session
 * <li> 2 - message
 * <li> 3 - user
 * <li> 4 - tenant
 * <li> 5 - role
 */
package (com.arvatosystems) t9t.msglog {
    default private unsigned trim noControlChars;
    properties noJava, noDDL, simpleref, lob, lazy, length, serialized,
        tenantCategory is com.arvatosystems.t9t.annotations.TenantCategory(),
        searchprefix is com.arvatosystems.t9t.annotations.SearchPrefix(),
        // serialized is com.arvatosystems.t9t.annotations.StoreSerialized,
        noAutoMap is com.arvatosystems.t9t.annotations.NoAutoMap,
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable,
        ref is com.arvatosystems.t9t.annotations.IsObjectRef;

    class MessageRef RTTI 2 extends Ref {}

    /** Inbound messages. */
    final class MessageDTO extends MessageRef {
        properties tenantCategory="A";
        // combines fields from the RequestHeader and ResponseHeader message types, plus more
        required f42Ref                             sessionRef;             // identifies file or queue or socket which accepted the record
        required tenantId                           tenantId;               // identifies the tenant
        optional Integer                            recordNo;               // record of the transmission
        optional messageId                          messageId;
        optional Enum RetryAdviceType               idempotencyBehaviour;
        required userId                             userId;
        required instant(3)                         executionStartedAt;     // separate field as the record may be persisted late in the DB
        optional languageCode                       languageCode;
        optional Instant                            plannedRunDate;         // optional scheduled run date of the call (only for messages from the scheduler)
        optional f42Ref                             invokingProcessRef;     // for asynchronous requests, the request which initiated this one
        required pqon                               requestParameterPqon;   // partially qualified name of the request
        optional (RequestParameters...)             requestParameters properties serialized="16777215", noAutoMap, length="16777215"; // 16 MB - 1 Byte is max. allowed message length
        optional (ServiceResponse...)               response          properties serialized="16777215", noAutoMap, length="16777215";
        optional Long                               processingTimeInMillisecs;  // how long after executionStartedAt was the request complete
        optional Integer                            returnCode;                 // return code of request processing
        optional Unicode(512) allowControlChars     errorDetails;               // further information about the error location
        optional f42Ref                             rerunByProcessRef;          // reference from the original request to the rerun - references this entity
        optional Unicode(16)                        hostname;                   // the (possibly abbreviated) hostname or K8s pod name
        optional Ascii(4)                           serverType;                 // the functional type of server / service (null for main)
        optional Integer                            partition;                  // in case called by a kafka topic consumer: which partition was used?
        optional Integer                            processingDelayInMillisecs; // how long after executionStartedAt was the received (for async messages)
        optional Enum TransactionOriginType         transactionOriginType;      // type of the initiator
        optional defaultExternalId                  essentialKey;               // a request specific key field
    }



    // MessageStatistics defines aggregated portions of MessageDTO for the purpose of SLA reporting and performance monitoring

    class MessageStatisticsRef RTTI 19 extends Ref {}

    class MessageStatisticsKey extends MessageStatisticsRef {
        required Instant(0)                         slotStart;              // beginning of time slot
        required tenantId                           tenantId;               // identifies the tenant
        required Unicode(16)                        hostname;               // the (possibly abbreviated) hostname or K8s pod name
        required Ascii(4)                           serverType;             // the functional type of server / service (null for main)
        required Integer                            partition;              // in case called by a kafka topic consumer: which partition was used?
        required Enum TransactionOriginType         transactionOriginType;  // type of the initiator
        required userId                             userId;
        required pqon                               requestParameterPqon;   // partially qualified name of the request
    }
    final class MessageStatisticsDTO extends MessageStatisticsRef {
        properties tenantCategory="A";
        required Instant(0)                         slotStart;              // beginning of time slot
        required tenantId                           tenantId;               // identifies the tenant
        required Unicode(16)                        hostname;               // the (possibly abbreviated) hostname or K8s pod name
        required Ascii(4)                           serverType;             // the functional type of server / service (null for main)
        required Integer                            partition;              // in case called by a kafka topic consumer: which partition was used?
        required Enum TransactionOriginType         transactionOriginType;  // type of the initiator
        required userId                             userId;
        required pqon                               requestParameterPqon;   // partially qualified name of the request

        required int                                countOk;                // requests with return code 0..199999999
        required int                                countError;             // requests with return code 200000000..999999999
        required long                               processingTimeMax;      // maximum processing time in ms
        required long                               processingTimeTotal;    // sum of processing times in ms
        required long                               processingDelayMax;     // how long after executionStartedAt was the received (for async messages)
        required long                               processingDelayTotal;   // how long after executionStartedAt was the received (for async messages)
        optional Double                             processingTimeAvg  properties noJava, noDDL, noAutoMap; // average processing time
        optional Double                             processingDelayAvg properties noJava, noDDL, noAutoMap; // average processing delay
    }
}
