/*
 * Copyright (c) 2012 - 2018 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import t9t.base.types.*
import t9t.base.api.*
import t9t.base.entities.*
import t9t.base.crud.*
import t9t.base.search.*
import t9t.genconf.*

package (com.arvatosystems) t9t.genconf.request {
    default private unsigned trim noControlChars;
    properties inherited,
        tenantCategory is com.arvatosystems.t9t.annotations.TenantCategory(),
        searchprefix is com.arvatosystems.t9t.annotations.SearchPrefix(),
        serialized is com.arvatosystems.t9t.annotations.StoreSerialized,
        noAutoMap is com.arvatosystems.t9t.annotations.NoAutoMap,
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable,
        ref is com.arvatosystems.t9t.annotations.IsObjectRef;

    class ConfigSearchRequest           extends SearchRequest<ConfigDTO, FullTrackingWithVersion> {}
    class ConfigCrudRequest             extends CrudSurrogateKeyRequest<ConfigRef, ConfigDTO, FullTrackingWithVersion> {}

    /** A service request to read a single configuration value, and to fall back to specific defaults if no entry is found.
     * If no entry is found with the specific key, the fields genericRef2, 1, configKey and tenantId will be set to default values (if configured) as follows:
     * genericRef2 - 0
     * genericRef1 - 0
     * tenantId - @ (GLOBAL_TENANT_ID)
     *
     * In case the specific parameter did have the according value already, of course no second redundant SELECT will be performed.
     */
    class ReadConfigWithDefaultsRequest extends RequestParameters return ReadConfigWithDefaultsResponse {
        (ConfigKey)                                 key;                        // the desired key data
        boolean                                     retryWithDefaultRef2;       // if TRUE, a retry will be done with genericRef2 = 0, else not.
        boolean                                     retryWithDefaultRef1;       // if TRUE, a retry will be done with genericRef1 = 0, else not.
        boolean                                     retryWithDefaultTenant;     // if TRUE, a retry will be done with tenantId = GLOBAL_TENANT_ID, else not.
    }

    /** Returns the selected record. The defaultsUsed flag shows, if the record is specific (false) or less specific (true).
     *  The configurationResult is empty (null) if no record has been found.
     */
    class ReadConfigWithDefaultsResponse extends ServiceResponse {
        optional (ConfigDTO)                        configurationResult;        // if null, no configuration has been found for the key
        boolean                                     defaultsUsed;               // if FALSE, the specific entry was found, otherwise at least one value was set to defaults
    }

    /** If multiple entries exist for the same configGroup (i.e. are required by the same process), multiple separate READs
     * should be avoided and the whole available set read instead in a single JPA query, using this API.
     * Depending on the setting of readGlobal, only the default settings (stored with the @ tenant) will be read, or the tenant
     * specific entries. */
     class ReadConfigMultipleEntriesRequest extends RequestParameters return ReadConfigMultipleEntriesResponse {
         required configGroup                       configGroup;                // the fixed key (application index)
         required boolean                           readGlobalTenant;           // if true, the application defaults will be read, else the entries of the default tenant
     }

     class ReadConfigMultipleEntriesResponse extends ServiceResponse {
         required (ConfigDTO) required List <>      entries;
     }

}
