/*
 * Copyright (c) 2012 - 2018 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import apiw.*
import t9t.base.types.*
import t9t.base.entities.*

package (com.arvatosystems) t9t.genconf {
    default private unsigned trim noControlChars;
    properties inherited,
        tenantCategory is com.arvatosystems.t9t.annotations.TenantCategory(),
        searchprefix is com.arvatosystems.t9t.annotations.SearchPrefix(),
        serialized is com.arvatosystems.t9t.annotations.StoreSerialized,
        noAutoMap is com.arvatosystems.t9t.annotations.NoAutoMap,
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable,
        ref is com.arvatosystems.t9t.annotations.IsObjectRef;

    type configGroup                    is t9tShortId;      // a fixed token assigned by the application. Every package should assign a single configGroup only.
    type configKey                      is Unicode(64);     // specific key for the data, possibly concatenated fields with custom separators.

    /** The ConfigTypeEnum indicates, which kind of information is stored in the configuration record.
     * It is a policy that only a single of the value fields is used per record.
     */
    enum ConfigFieldType {
        BOOLEAN="B",                                            // indicates the Boolean field is used
        INTEGRAL="I",                                           // indicates the Long field is used (for numeric integral values)
        REFERENCE="R",                                          // indicates the Long field is used to store an object reference
        FRACTIONAL="F",                                         // indicates the Decimal field is used (for numeric values with fractional data)
        TEXT="T",                                               // indicates the Unicode field is used (for any string value)
        OBJECT="O"                                              // indicates the generic object type field is used (which can contain any object structure).
    }


    /** A reference to a single configuration entry. */
    class ConfigRef RTTI 9 extends Ref {
    }

    /** Defines the natural key for a configuration entry. */
    final class ConfigKey extends ConfigRef {
        required configGroup            configGroup;            // the fixed key (application index)
        required configKey              configKey;              // a concatenated key of additional key parameters, "-" if not required.
        required f42Ref                 genericRef1;            // the first generic reference, 0 if not required
        required f42Ref                 genericRef2;            // the second generic reference, 0 if not required
    }

    /** A configuration record as exchanged with the frontend for a simple administration UI. */
    final class ConfigDTO extends ConfigRef {
        properties tenantCategory="D";
        required configGroup            configGroup properties notupdatable;  // the fixed key (application index)
        required configKey              configKey   properties notupdatable;  // a concatenated key of additional key parameters, "-" if not required.
        required f42Ref                 genericRef1 properties notupdatable;  // the first generic reference, 0 if not required
        required f42Ref                 genericRef2 properties notupdatable;  // the second generic reference, 0 if not required
        required boolean                isActive    properties active;
        required enum ConfigFieldType   configTypeEnum;         // indicator, which type of field is used
        optional Boolean                booleanProperty;        // a boolean type property
        optional Long                   integerProperty;        // an integer type property
        optional Decimal(18,6)          decimalProperty;        // a decimal type property
        optional Unicode(1024)          stringProperty;         // a string type property
        optional Object                 objectProperty properties serialized;  // any arbitrary object, stored serialized. TODO: specify length
    }
}
