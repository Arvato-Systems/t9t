/*
 * Copyright (c) 2012 - 2025 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.*
import apiw.*
import api.media.*
import t9t.base.types.*
import t9t.base.moduleCfg.*

/**
 * Core AI type definitions, draft 1
 */
package (com.arvatosystems) t9t.ai {
    default private unsigned trim noControlChars;
    properties inherited, qualifierFor, active, length, serialized, compact, compact2,
        tenantCategory is com.arvatosystems.t9t.annotations.TenantCategory(),
        searchprefix is com.arvatosystems.t9t.annotations.SearchPrefix(),
        noAutoMap is com.arvatosystems.t9t.annotations.NoAutoMap,
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable,
        ref is com.arvatosystems.t9t.annotations.IsObjectRef;

    // some types which are used frequently in the OpenAI APIs

    type modelId                                    is Ascii(64);       // identifier of a model, could include pathnames (Huggingface models)
    type aiId                                       is Ascii(64);       // identifier of any ID at the provider (some providers use longer IDs than allowed by our defaultExternalId)
    type textChunk                                  is Unicode(65536) allowControlChars;   // used for requests or results
    type assistantId                                is defaultExternalId;  // The ID of an assistant - not shortId because OpenAIs ID are usually longer

    enum AiSyncStatusType {
        PROCESSED                       = "OK",
        TO_BE_UPDATED                   = "EXP",                        // created, but some property was modified later
        ERROR                           = "ERR"
    }

    enum AiRoleType {
        USER                            = "U",
        SYSTEM                          = "S"
    }

    /**
     * Extended tenant configuration for data exceeding the generic tenant configuration of the application server.
     * Records of this entity share the same artifical primary key tenantId.
     */
    class AiModuleCfgDTO extends ModuleConfigDTO {
        properties                                      tenantCategory="D";                 // if entry missing, get the global one
    }

    class AiChatLogRef RTTI 447 extends Ref {}
    class AiChatLogDTO extends AiChatLogRef {
        required (AiConversationRef..., AiConversationDTO)  conversationRef      properties ref, searchprefix="conversation";
        required Enum AiRoleType                            roleType;            // determines whether the entry has been caused by user input or the model's output
        optional textChunk                                  userInput;           // user's request message
        optional meta.identifier                            functionPqon;        // PQON of the invoked callback
        optional Object                                     functionParameter    properties serialized="65535", length="65535", compact, compact2; // parameters for the callback
        optional Long                                       sinkRef;             // uploaded or generated file
    }

    /** User preferences and status. */
    class AiUserStatusRef RTTI 446 extends Ref {}
    final class AiUserStatusKey extends AiUserStatusRef {
        required userId                                 userId;
    }

    class AiUserStatusDTO extends AiUserStatusRef {
        required userId                                 userId                  properties notupdatable;
        optional (AiAssistantRef..., AiAssistantKey)    preferredAssistantRef   properties ref, searchprefix="preferredAssistant";
        optional (AiConversationRef...)                 currentConversationRef  properties ref, searchprefix="currentConversation";
    }



    class AiAssistantRef RTTI 445 extends Ref {}
    final class AiAssistantKey extends AiAssistantRef {
        required assistantId                            assistantId;
    }
    class AiAssistantDTO extends AiAssistantRef {
        required assistantId                            assistantId         properties notupdatable;
        required shortText                              description;                        // the name / description of the assistant
        required boolean                                isActive            properties active;
        required languageCode                           languageCode;                       // the language to use
        required customizationQualifier                 aiProvider          properties qualifierFor="ai.service.IAiChatService";   // selects the chat service implementation
        required modelId                                model;                              // the model to use (the AI provider's ID)
        required textChunk                              instructions;                       // the model's instructions
        optional Float                                  temperature;                        // temperature for the chat model
        optional Float                                  topP;                               // top-P selection
        optional Integer                                maxTokens;                          // if set, limits the cost of the response
        required boolean                                documentAccessPermitted;            // if the assistant has access to documents for simple RAG
        required boolean                                toolsPermitted;                     // if tool access (t9t procedures) is allowed at all (detailed permissions handled elsewhere)
        required boolean                                executePermitted;                   // if the assistant is allowed to run code in a sandbox (OpenAI specific, expensive!)
        optional Json                                   metadata;                           // assistant metadata / parameters
        optional Enum AiSyncStatusType                  syncStatus;                         // specifies if the assistant has been created at the provider
        optional aiId                                   aiAssistantId;                      // the ID in the provider's namespace
        required shortText                              greeting;                           // the initial greeting of the assistant
        optional shortText                              aiName;                             // the fictional name of the AI (instead of just default "AI chat")
        // optional configuration of a vector DB
        optional customizationQualifier                 vectorDbProvider    properties qualifierFor="vdb.service.IVectorIO";       // selects the vector DB implementation
        // optional configuration of TTS services
        optional customizationQualifier                 ttsProvider         properties qualifierFor="ai.service.ITTSService";      // selects the TTS provider (parlor, OpenAI, VoiceCraft, ...)
        optional modelId                                ttsModel;                           // some TTS providers have an enumeration of voices only (OpenAI)
        optional textChunk                              ttsInstructions;                    // some TTS providers allow a detailed description of the desired speaker

        optional Json                                   z;
    }
    class AiAssistantDescription extends AiAssistantRef {
        required assistantId                            assistantId properties notupdatable;
        required shortText                              description;                        // the name / description of the assistant
        optional shortText                              aiName;                             // the name of the AI (display name in the human dialog)
    }

    /**
     * Documents the conversation threads and tool results.
     * Creation date and user are documented via the regular tracking columns.
     * The DTO stores additional information, for example provider specific identifiers or identified business objects of the application.
     */
    class AiConversationRef RTTI 444 extends Ref {}
    class AiConversationDTO extends AiConversationRef {
        required userId                                 userId;                             // the application user who runs the conversation
        required (AiAssistantRef..., AiAssistantDescription)  aiAssistantRef properties ref, searchprefix="aiAssistant";  // the assistant used
        required f42Ref                                 createdBySessionRef;                // allow to auto-switch threads after a relog
        optional aiId                                   providerThreadId;                   // the conversation ID (threadId) of the provider
        required int                                    numberOfMessages;                   // how many messages have been done in this conversation
        required int                                    numberOfFilesAdded;                 // how many files have been uploaded in this conversation
        optional Json                                   fileReferences;                     // maps file names to provider specific references
        optional defaultExternalId                      businessId;                         // for example a customer ID, once identified
        optional f42Ref                                 businessRef;                        // for example an order ref
        optional Json                                   z;                                  // project specific extensions
    }
}
