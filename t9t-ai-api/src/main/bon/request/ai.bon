/*
 * Copyright (c) 2012 - 2025 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import apiw.*
import api.media.*
import t9t.base.types.*
import t9t.base.api.*
import t9t.base.entities.*
import t9t.base.crud.*
import t9t.base.search.*
import t9t.ai.*
import t9t.ai.mcp.*

/**
 * Core AI request definitions, draft 1
 */
package (com.arvatosystems) t9t.ai.request {
    default private unsigned trim noControlChars;


    /** Standard CRUD and search requests... */
    class AiModuleCfgCrudRequest                    extends CrudModuleCfgRequest    <AiModuleCfgDTO> {}
    class AiModuleCfgSearchRequest                  extends SearchRequest           <AiModuleCfgDTO, FullTrackingWithVersion> {}

    class AiUserStatusCrudRequest                   extends CrudSurrogateKeyRequest <AiUserStatusRef, AiUserStatusDTO, FullTrackingWithVersion> {}
    class AiUserStatusSearchRequest                 extends SearchRequest           <AiUserStatusDTO, FullTrackingWithVersion> {}

    class AiAssistantCrudRequest                    extends CrudSurrogateKeyRequest <AiAssistantRef, AiAssistantDTO, FullTrackingWithVersion> {}
    class AiAssistantSearchRequest                  extends SearchRequest           <AiAssistantDTO, FullTrackingWithVersion> {}
    // class LeanAiAssistantSearchRequest              extends LeanSearchRequest {}
    class AiAssistantLeanSearchRequest              extends LeanSearchRequest {}

    class AiConversationCrudRequest                 extends CrudSurrogateKeyRequest <AiConversationRef, AiConversationDTO, FullTrackingWithVersion> {}
    class AiConversationSearchRequest               extends SearchRequest           <AiConversationDTO, FullTrackingWithVersion> {}

    class AiChatLogSearchRequest                    extends SearchRequest           <AiChatLogDTO, WriteTracking> {}

    /** API to submit user input (initial call without parameters to get the greeting). */
    class AiChatRequest extends RequestParameters return AiChatResponse {
        optional (AiAssistantRef...)                aiAssistantRef;
        optional textChunk                          userInput;
        optional (MediaData)                        userUpload;
    }

    /** System response to user questions. */
    class AiChatResponse extends ServiceResponse {
        required (AiAssistantDescription)           aiAssistant;
        required textChunk List<>                   textOutput;
        optional (MediaData)                        mediaOutput;
    }

    /** A no op request, just done to check if we have permissions to establish a connection. */
    class AiGetSseRequest extends RequestParameters return AiGetToolsResponse {}

    /** t9t currently does not provide prompts nor resources, therefore we just return tools. */
    class AiGetToolsRequest extends RequestParameters return AiGetToolsResponse {}

    class AiGetToolsResponse extends ServiceResponse {
        required (AiToolSpecification) required List<>      tools;
    }

    /** Run the specified tool. */
    class AiRunToolRequest extends RequestParameters   return AiRunToolResponse {
        required defaultExternalId                          name;               // ID of the tool
        optional Json                                       parameters;         // parameters in structured form
        optional Unicode(64000)                             arguments;          // parameters as string
    }

    class AiRunToolResponse extends ServiceResponse {
        optional Object                                     response;           // response as MediaData, or structured object
//        optional (MediaData)                            response;             // response if it is a single text, image or document
//        optional Json                                   structuredResponse;   // response if it is a data structure
    }
}
