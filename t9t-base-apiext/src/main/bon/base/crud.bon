/*
 * Copyright (c) 2012 - 2018 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.*
import apiw.*
import t9t.base.types.*
import t9t.base.api.*
import t9t.base.entities.*
import t9t.base.moduleCfg.*

package (com.arvatosystems) t9t.base.crud {
    default private unsigned trim noControlChars;

    /**
     * The base class to be used for any CRUD request. It will be inherited by Crud*KeyRequests for specific key types.
     */
    abstract class CrudAnyKeyRequest<DATA, TRACKING extends TrackingBase> extends RequestParameters return CrudAnyKeyResponse<!DATA, !TRACKING> {
        required enum OperationType     crud;               // specifies the command
        required boolean                onlyActive;         // work on active records only, fail if record exists, but is inactive
        optional version                version;            // this is a required field for all crud except INSERT and READ
        optional (!DATA...)             data;               // the full data record
    }
    /**
     * The base class to be used for CRUD specific responses.
     */
    abstract class CrudAnyKeyResponse<DATA, TRACKING extends TrackingBase> extends ServiceResponse {
        optional (!TRACKING...)         ^tracking;          // the tracking columns, returned for READ commands
        optional (!DATA...)             data;               // the full data record
    }

    /**
     * The base class to be used for CRUD specific requests for entities which have an artificial key.
     */
    abstract class CrudSurrogateKeyRequest<REF extends Ref, DATA extends !REF, TRACKING extends TrackingBase> extends CrudAnyKeyRequest<!DATA, !TRACKING> return CrudSurrogateKeyResponse<!DATA, TrackingBase> {
        optional f42Ref                 key;                // the artificial key
        optional (!REF...)              naturalKey;         // one of the possible alternative natural keys
    }

    /**
     * The base class to be used for CRUD specific responses for entities which have an artificial key.
     */
    class CrudSurrogateKeyResponse<DATA, TRACKING extends TrackingBase> extends CrudAnyKeyResponse<!DATA, !TRACKING> {
        optional f42Ref                 key;                // the artificial key
    }

    /**
     * The base class to be used for CRUD specific requests for entities which have a natural key of type String.
     */
    abstract class CrudStringKeyRequest<DATA, TRACKING extends TrackingBase> extends CrudAnyKeyRequest<!DATA, !TRACKING> return CrudStringKeyResponse<!DATA, !TRACKING> {
        optional t9tShortId             key;                // the key object
    }

    /**
     * The base class to be used for CRUD specific responses for entities which have a natural key of type String.
     */
    class CrudStringKeyResponse<DATA, TRACKING extends TrackingBase> extends CrudAnyKeyResponse<!DATA, !TRACKING> {
        optional t9tShortId             key;                // the key object
    }

    /**
     * The base class to be used for CRUD specific requests for entities which have a natural key of type Long.
     */
    abstract class CrudLongKeyRequest<DATA, TRACKING extends TrackingBase> extends CrudAnyKeyRequest<!DATA, !TRACKING> return CrudLongKeyResponse<!DATA, !TRACKING> {
        optional f42Ref                 key;                // the key object
    }

    /**
     * The base class to be used for CRUD specific responses for entities which have a natural key of type Long.
     */
    class CrudLongKeyResponse<DATA, TRACKING extends TrackingBase> extends CrudAnyKeyResponse<!DATA, !TRACKING> {
        optional f42Ref                 key;                // the key object
    }

    /**
     * The base class to be used for CRUD specific requests for entities which have a natural key defined by a separate class.
     * (Consider using CrudSuperclassKey instead!)
     */
    abstract class CrudCompositeKeyRequest<KEY extends CompositeKeyRef, DATA extends CompositeKeyBase, TRACKING extends TrackingBase> extends CrudAnyKeyRequest<!DATA,!TRACKING> return CrudCompositeKeyResponse<!KEY, !DATA, !TRACKING> {
        optional (!KEY...)              key;                // the key object
    }

    /**
     * The base class to be used for CRUD specific responses for entities which have a natural key defined by a separate class.
     */
    class CrudCompositeKeyResponse<KEY extends CompositeKeyRef, DATA extends CompositeKeyBase, TRACKING extends TrackingBase> extends CrudAnyKeyResponse<!DATA, !TRACKING> {
        optional (!KEY...)              key;                // the key object
    }


    /**
     * The base class to be used for CRUD specific requests for the special module config entities (key without any fields, the implicit tenant reference is the key).
     */
    abstract class CrudModuleCfgRequest<DATA extends ModuleConfigDTO> extends CrudCompositeKeyRequest<ModuleConfigKey,!DATA,FullTrackingWithVersion> return CrudModuleCfgResponse<!DATA> {
    }

    /**
     * The base class to be used for CRUD specific responses for entities of special module config entities.
     */
    class CrudModuleCfgResponse<DATA extends ModuleConfigDTO> extends CrudCompositeKeyResponse<ModuleConfigKey, !DATA, FullTrackingWithVersion> {
    }

    /**
     * The base class to be used for CRUD specific requests for entities which have a natural key defined by a separate class.
     * (Consider using CrudSuperclassKey instead!)
     */
    abstract class NewCrudCompositeKeyRequest<REF, KEY extends !REF, DATA extends !REF, TRACKING extends TrackingBase> extends CrudAnyKeyRequest<!DATA,!TRACKING> return CrudCompositeKeyResponse<!KEY, !DATA, !TRACKING> {
        optional (!KEY...)              key;                // the base object for key and data
    }

    /**
     * The base class to be used for CRUD specific responses for entities which have a natural key defined by a separate class.
     */
    class NewCrudCompositeKeyResponse<REF, KEY extends !REF, DATA extends !REF, TRACKING extends TrackingBase> extends CrudAnyKeyResponse<!DATA, !TRACKING> {
        optional (!KEY...)              key;                // the key object
    }

    /**
     * The base class to be used for CRUD specific requests for entities which have a natural key which is the supertype of the DTO.
     * Normally, REF = KEY, and this then represents the only key.
     * However it is possible to specify some (empty) superclass as the parent of KEY, which can then be used to determine all alternate
     * keys to the DATA. Those must be final then in order to be evaluated automatically. (This works the same as in the ArtificialSurrogateKey class).
     */
    abstract class CrudSuperclassKeyRequest<REF, KEY extends !REF, DATA extends !KEY, TRACKING extends TrackingBase> extends CrudAnyKeyRequest<!DATA,!TRACKING> return CrudSuperclassKeyResponse<!KEY, !DATA, !TRACKING> {
        optional (!KEY...)              key;                // the key object. (TBD: is a DTO valid here, or drop the ...?)
        optional (!REF...)              naturalKey;         // one of the possible alternative natural keys
    }

    /**
     * The base class to be used for CRUD specific responses for entities which have a natural key.
     */
    class CrudSuperclassKeyResponse<KEY, DATA extends !KEY, TRACKING extends TrackingBase> extends CrudAnyKeyResponse<!DATA, !TRACKING> {
        optional (!KEY...)              key;                // the key object (here, often the DTO is returned)
    }





    /**
     * The base class to be used for Resolver specific requests for the artificial key.
     */
    abstract class RefResolverRequest<REF extends Ref> extends RequestParameters return RefResolverResponse {
        required (!REF...)              ref;                // the reference to the data
    }

    /**
     * The base class to be used for Resolver specific responses for the artificial key.
     */
    class RefResolverResponse extends ServiceResponse {
        required f42Ref                 key;                // the artificial key
    }
}
