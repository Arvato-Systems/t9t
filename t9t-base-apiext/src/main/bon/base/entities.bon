/*
 * Copyright (c) 2012 - 2018 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.*
import apiw.*
import api.auth.*
import t9t.base.types.*

/** Data types which are relevant for stored entities on the database, such as auditing data related. */
package (com.arvatosystems) t9t.base.entities {
    default private unsigned trim noControlChars;

    /*
     * The set of properties each class within this package shall have by default.
     */
    properties inherited, version, active, noupdate, noinsert, ^default, currentUser, currentTimestamp,
        tenantCategory is com.arvatosystems.t9t.annotations.TenantCategory(),
        searchprefix is com.arvatosystems.t9t.annotations.SearchPrefix(),
        serialized is com.arvatosystems.t9t.annotations.StoreSerialized,
        noAutoMap is com.arvatosystems.t9t.annotations.NoAutoMap,
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable,
        ref is com.arvatosystems.t9t.annotations.IsObjectRef;

    // internal class to define an additional JPA column for multitenancy
    class InternalTenantId nojava {
        required tenantId                           tenantId;      // the multitenancy discriminator
    }

    // internal class to define an additional JPA column for multitenancy
    class InternalTenantRef42 {
        required f42Ref                     tenantRef       properties noupdate, notupdatable;      // the multitenancy discriminator
    }

    /** Special tracking class for the Source. Here we have no processRef, and the user is part of the DTO.
     * An entity listener for this won't need the current execution context.
     */
    class SessionTracking extends TrackingBase {
        required userId                     cTechUserId     properties noupdate, currentUser;       // noinsert removed, causes problems with H2 unit tests
        required instant                    cTimestamp      properties noupdate, currentTimestamp;  // noinsert removed, causes problems with H2 unit tests
        required userId                     mTechUserId     properties currentUser;                 // noupdate, noinsert removed, causes problems with H2 unit tests
        required instant                    mTimestamp      properties currentTimestamp;
    }

    /** Special tracking class for the buckets. Here we have no processRef, and the user is part of the DTO.
     * An entity listener for this won't need the current execution context.
     */
    class BucketTracking extends TrackingBase {
        required instant                    cTimestamp      properties noupdate, currentTimestamp;  // noinsert removed, causes problems with H2 unit tests
        required instant                    mTimestamp      properties currentTimestamp;
        required int                        version         properties version;
    }

    /** Special tracking class for the Message log. Here we have no processRef, and the user is part of the DTO. Write only.
     * An entity listener for this won't need the current execution context.
     */
    class MessageTracking extends TrackingBase {
        required userId                     cTechUserId     properties noupdate, currentUser;       // noinsert removed, causes problems with H2 unit tests
        required instant                    cTimestamp      properties noupdate, currentTimestamp;  // noinsert removed, causes problems with H2 unit tests
    }

    /** Tracking data for write-only tables. */
    class WriteTracking extends TrackingBase {
        required userId                     cTechUserId     properties noupdate, currentUser;       // noinsert removed, causes problems with H2 unit tests
        required userId                     cAppUserId      properties noupdate;
        required instant                    cTimestamp      properties noupdate, currentTimestamp;  // noinsert removed, causes problems with H2 unit tests
        required t9tRef                     cProcessRef     properties noupdate;
    }

    /** Tracking data for read/write tables, using pessimistic locking. */
    class FullTracking extends WriteTracking {
        required userId                     mTechUserId     properties currentUser;
        required userId                     mAppUserId;
        required Instant                    mTimestamp      properties currentTimestamp;
        required t9tRef                     mProcessRef;
    }

    /** Tracking data for read/write tables, using optimistic locking, but no active column (usually transaction data). */
    class FullTrackingWithVersion extends FullTracking {
        required int                        version         properties version;
    }

    class AdditionalHistoryTableColumns {
        required enum OperationType         crud;
        required long                       historyNo;   // maybe we do not need this, because we have the version now
        required instant                    localTimestamp;
    }
}
