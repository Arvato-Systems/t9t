/*
 * Copyright (c) 2012 - 2020 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.media.*
import t9t.base.types.*
import t9t.base.api.*
import t9t.base.entities.*
import t9t.base.output.*
import t9t.base.search.*
import t9t.base.crud.*
import t9t.io.*

package (com.arvatosystems) t9t.io.request {
    default private unsigned trim noControlChars;

    class CsvConfigurationCrudRequest           extends CrudSurrogateKeyRequest<CsvConfigurationRef, CsvConfigurationDTO, FullTrackingWithVersion> {}
    class CsvConfigurationSearchRequest         extends SearchRequest<CsvConfigurationDTO, FullTrackingWithVersion> {}
    class LeanCsvConfigurationSearchRequest     extends LeanSearchRequest {}

    class FilePathPrefixRequest                 extends RequestParameters return FilePathPrefixResponse {}
    class FilePathPrefixResponse                extends ServiceResponse {
        required Unicode(255)                   prefix;
    }


    class SinkCrudRequest                       extends CrudSurrogateKeyRequest     <SinkRef, SinkDTO, FullTrackingWithVersion> {}
    class SinkSearchRequest                     extends SearchRequest               <SinkDTO, FullTrackingWithVersion> {}
    class SinkResolverRequest                   extends RefResolverRequest          <SinkRef> {}

    class DataSinkCrudRequest                   extends CrudSurrogateKeyRequest     <DataSinkRef, DataSinkDTO, FullTrackingWithVersion> {}
    class DataSinkSearchRequest                 extends SearchRequest               <DataSinkDTO, FullTrackingWithVersion> {}
    class LeanDataSinkSearchRequest             extends LeanSearchRequest {}

    class AsyncMessageSearchRequest             extends SearchRequest               <AsyncMessageDTO, WriteTracking> {}
    class AsyncChannelSearchRequest             extends SearchRequest               <AsyncChannelDTO, FullTrackingWithVersion> {}
    class AsyncChannelCrudRequest               extends CrudSurrogateKeyRequest     <AsyncChannelRef, AsyncChannelDTO, FullTrackingWithVersion> {}
    class LeanAsyncChannelSearchRequest         extends LeanSearchRequest {}
    class AsyncQueueSearchRequest               extends SearchRequest               <AsyncQueueDTO, FullTrackingWithVersion> {}
    class AsyncQueueCrudRequest                 extends CrudSurrogateKeyRequest     <AsyncQueueRef, AsyncQueueDTO, FullTrackingWithVersion> {}
    class LeanAsyncQueueSearchRequest           extends LeanSearchRequest {}
    class AsyncMessageCrudRequest               extends CrudSurrogateKeyRequest     <AsyncMessageRef, AsyncMessageDTO, WriteTracking> {}

    /** Stores a pre-filled sinkDTO. Technical support method, only required because input data processing is done from outside request scope. */
    class StoreSinkRequest                      extends RequestParameters return SinkCreatedResponse {
        required (SinkDTO...)                       dataSink;                   // only used internally to store the result of an import
    }

    /**
     * Invocation allows to output a simple header/footer document with no data items included.
     * In some cases it will be an empty file, but still useful to see generated filenames or test connectivity.
     * Intended to be used from the configuration UI, but also for remote tests.
     */
    class DataSinkTestRequest extends RequestParameters return SinkCreatedResponse {
        required dataSinkId                         dataSinkId;                  // every data output is assigned a name
        required int                                numDataRecords;              // number of data records to send (0..n)
    }

    /**
     * Request to write some object records to a data sink. Used by the InputSession to create response files.
     */
    class WriteRecordsToDataSinkRequest extends RequestParameters return SinkCreatedResponse {
        required dataSinkId                         dataSinkId;                  // every data output is assigned a name
        required Object List<>                      records1;                    // first list of records
        required Object List<>                      records2;                    // second list of records
    }

    /** Dummy request for testing, which echoes the parameters. */
    class ImportStatusRequest extends RequestParameters return ImportStatusResponse {
        required Object List<>                      responses;          // every list entry creates one response record
    }

    /** Response type for return messages which should be written to the response data sink. */
    class ImportStatusResponse extends ServiceResponse {
        required Object List<>                      responses;          // every list entry creates one response record
    }

    /** Request to mark a Sink entry as "processed". */
    class MarkSinkAsProcessedRequest extends RequestParameters {
        required f42Ref                             sinkRef;                        // references some existing Sink
    }

    /** Request which can be used to download a file.
     * Updated API: A limit of 0 means unlimited size download. Before, it requested the file information only.
     * The file information retrieval can be done by the following requests
     * <ul>
     * <li>The Sink CRUD request with CRUD.READ</li>
     * <li>The Sink Search request with objectRef = (sink)</li>
     * </ul>
     *
     * Actual file data will be returned (or an error message, if the sink does not represent a file but went to a queue or JMS topic instead).
     *
     * @see RetrieveMediaDataRequest for a size limited, but more flexible request (handling text as well as binary, plus media type)
     */
    class FileDownloadRequest extends RequestParameters return FileDownloadResponse {
        required f42Ref                             sinkRef;                        // references some existing Sink
        required unsigned long                      offset;                         // offset from start
        required unsigned int                       limit;                          // max number of bytes to transfer
    }

    class FileDownloadResponse extends ServiceResponse {
        required (SinkDTO...)                       sink;                           // file information
        required boolean                            hasMore;                        // if this data does not reach EOF
        required Binary(11500000)                   data;                           // must be less than maxMessage size in length, when base64 encoded,
        // which is FortytwoConstants.MAXIMUM_MESSAGE_LENGTH = 16 MB
    }

    /** The file upload request allows to create a sink entry for given upload data.
     * It returns a sink reference in case of success.
     */
    class FileUploadRequest extends RequestParameters return SinkCreatedResponse {
        required (OutputSessionParameters...)       parameters;                     // any input, most important is DATA_SINK_ID
        required Binary(11500000)                   data;                           // must be less than maxMessage size in length, when base64 encoded,
        // which is FortytwoConstants.MAXIMUM_MESSAGE_LENGTH = 16 MB
    }

    /** Test data record which is used for output tests. */
    class DemoRecord {
        required int                                recordNo;
        required Decimal(5,2)                       minusPi;
        required Unicode(20)                        hello;
        required Day                                today;
        required Timestamp(0)                       now;
        optional Ascii(10)                          none;
        required boolean                            yes;
        required boolean                            no;
    }

    /**
     * This request deletes files and/or sink entries which are older than the specified retention period.
     * Only data for the current tenant will be deleted.
     */
    class PurgeOutdatedSinksAndFilesRequest extends RequestParameters {
        optional dataSinkId                         onlyDataSinkId;                 // if not specified, the request handler iterates over all data sinks which have either retentionPeriodFiles != null or retentionPeriodSinks !0 null
    }


    abstract class AbstractImportData {}

    /** Import source string */
    final class ImportFromString extends AbstractImportData {
        required Unicode(8000000)                   text;
    }

    /** Import source byte array */
    final class ImportFromRaw extends AbstractImportData {
        required Binary(8000000)                    data;
    }

    /** Import source file */
    final class ImportFromFile extends AbstractImportData {
        required Unicode(255)                       pathname;     // external file or resource
        required boolean                            isResource;   // true for testing
    }

    /** Triggers an import via web service. */
    class ImportInputSessionRequest extends ContextlessRequestParameters {
        required dataSinkId                         dataSinkId;
        required uuid                               apiKey;
        required Unicode(255)                       sourceName;
        optional Json                               additionalParameters;
        required (AbstractImportData...)            data;
    }

    /** Stores data via sink (for example a customer document). */
    class StoreMediaDataRequest extends RequestParameters return SinkCreatedResponse {
        required dataSinkId                         dataSinkId;
        required (MediaData...)                     mediaData;   // the data
        optional f42Ref                             originatorRef;
        optional f42Ref                             configurationRef;
        optional f42Ref                             genericRefs1;
        optional f42Ref                             genericRefs2;
    }

    /** Retrieves data from a data sink (assumes that the data fits into 16 MB size). */
    class RetrieveMediaDataRequest extends RequestParameters return RetrieveMediaDataResponse {
        required f42Ref                             sinkRef;                // the sink reference
    }
    class RetrieveMediaDataResponse extends ServiceResponse {
        required (MediaData...)                     mediaData;              // the data
    }

    /** Used to asynchronously transfer a file via Camel route. */
    class ProcessCamelRouteRequest extends RequestParameters {
        required f42Ref                             sinkRef;
        optional Ascii(150)                         targetFileName;         // If needed you can set a target file name that is different to the orginal sink's file name.
        optional Ascii(255)                         targetCamelRoute;       // If needed you can explicitly set a target camel route. Otherwise the camel route of the corresponding data sink configuration is used.
    }

    /** Used to transfer all pending files via Camel route. */
    class ProcessAllCamelTransfersRequest extends RequestParameters {
        optional dataSinkId                         onlySinkId;  // if null, all pending processes will be transferred, else only the ones for the specified ID
        optional Integer                            minimumAge;  // minimum age of the sink in minutes (if blank, 60 minutes are assumed to avoid race conditions)
    }

    /** Check if a given sink file name has been used for the tenant */
    class CheckSinkFilenameUsedRequest extends RequestParameters return CheckSinkFilenameUsedResponse {
        required Unicode(255)                       fileOrQueueName;        // Filename to check
    }
    class CheckSinkFilenameUsedResponse extends ServiceResponse {
        required boolean                            isUsed;
    }

    /** Flushes the async channel. Writes all pending requests into a file and sets them to DONE. To be used by remote tests only. */
    class FlushPendingAsyncRequest extends RequestParameters return FlushPendingAsyncResponse {
        required boolean                            markAsDone;              // if true, mark the selected records as "done"
        required boolean                            exportToFile;            // if true, output the records to a file (otherwise, count only)
        required boolean                            returnInResponse;        // if true, output the records in the response
        optional dataSinkId                         dataSinkId;              // if null, the default data sink "asyncSink" will be used.
        optional t9tShortId                         onlyChannelId;           // if null, all requests will be written, if set, only pending requests for the given specific channel
        optional (AsyncQueueRef...)                 onlyQueue;               // if set, request only targets messages of this queue
    }
    class FlushPendingAsyncResponse extends ServiceResponse {
        required int                                numberOfRecords;         // returns the number of records selected (and possibly written and / or updated)
        optional f42Ref                             sinkRef;                 // the sink ref created (or null, if the sink is created only if actual data was written and numberOfRecordsWritten was 0)
        optional Unicode(255)                       filename;                // provides the filename used (can be null if the sink was configured to write only when data has been generated)
        required (InMemoryMessage) required List<>  records;                 // the payloads of the queried messages
    }

    /** Purge sent messages after a certain age has expired. Should be called by a scheduled job. */
    class PurgeSentAsyncMessagesRequest extends RequestParameters {
        required t9tShortId                         asyncQueueId;            // purge messages of this queue. Only the current tenant will be affected
        optional Integer                            overrideAge;             // if set, overrides the age configured in the queue config. If neither is set, 8 days is assumed.
    }

    /** Generates an async message. Primarily for testing purposes.
     * asyncChannelId must refer to an active channel or an error will be thrown.
     */
    class PerformAsyncRequest extends RequestParameters {
        required t9tShortId                         asyncChannelId;          // used to retrieve the URL and authentication parameters
        required Object                             payload;                 // test data
        optional Ascii(4)                           refType;                 // for debugging / maintenance: the type of reference
        optional defaultExternalId                  refIdentifier;           // for debugging / maintenance: order ID, customer ID etc.
        optional f42Ref                             ref;                     // for debugging / maintenance: related objectRef
    }

    /**
     * Obtains the status of one or multiple queues, for monitoring.
     */
    class GetQueueStatusRequest extends RequestParameters return GetQueueStatusResponse {
        required boolean                            onlyActive;              // if true, do not return status for inactive queues (DB criteria)
        optional (AsyncQueueRef...)                 onlyQueue;               // if defined, gets status for this queue only, otherwise for all queues
    }
    class GetQueueStatusResponse extends ServiceResponse {
        required (QueueStatus...) required List<>   status;
    }
    class QueueStatus {
        required t9tShortId                         asyncQueueId;
        required boolean                            running;
        optional Boolean                            isGreen;                // if the queue is running: queue is empty or last message was OK
        optional Boolean                            shuttingDown;           // if the queue is running: true if it currently shutting down
        optional Instant                            lastMessageSent;        // if the queue is running: when was the last successful message sent?
    }

    class UpdateAsyncMessageStatusRequest extends RequestParameters {
        required f42Ref                             asyncMessageRef;        // the objectRef of the message
        required enum ExportStatusEnum              newStatus;
    }

    /** Obtain the preset for a given qualifier. */
    class GetDataSinkPresetRequest extends RequestParameters return GetDataSinkPresetsResponse {
        optional Boolean                            isInput;
        required customizationQualifier             qualifier;
//         properties qualifierFor="out.be.IPreOutputDataTransformer,in.services.IInputDataTransformer";     // custom pre-transform to transform output data before storing it
    }

    class GetDataSinkPresetsResponse extends ServiceResponse {
        optional (DataSinkPresets...)               preset;
    }

    /** Merge the preset for a data sink into a stored configuration and return the updated configuration. */
    class MergeDataSinkPresetRequest extends RequestParameters return MergeDataSinkPresetResponse {
        required f42Ref                             dataSinkRef;
    }

    class MergeDataSinkPresetResponse extends ServiceResponse {
        required boolean                            wasMerged;       // if false, no Preset was found
        required (apiw.DataWithTrackingW<DataSinkDTO,FullTrackingWithVersion>) dwt;
    }
}
