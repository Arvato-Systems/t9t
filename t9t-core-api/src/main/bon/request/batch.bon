/*
 * Copyright (c) 2012 - 2023 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import t9t.base.types.*
import t9t.base.api.*
import t9t.base.entities.*
import t9t.base.output.*
import t9t.base.search.*
import t9t.base.crud.*
import t9t.base.request.*
import t9t.batch.*

package (com.arvatosystems) t9t.batch.request {
    default private unsigned trim noControlChars;
    properties inherited, serialized, ref;

    /**
     * Request for creating statistics for batch process.
     * Inserts the passed statistics record into the database.
     * Usually called from other clusters, to have their stats recorded into the main DB.
     */
    class LogStatisticsRequest extends RequestParameters {
        required (StatisticsDTO...)    statistics;
    }

    /**
     * Request for creating statistics for batch process.
     * Only Create operation is allowed.
     * */
    class StatisticsCrudRequest         extends CrudSurrogateKeyRequest<StatisticsRef, StatisticsDTO, WriteTracking> {}
    class StatisticsSearchRequest       extends SearchRequest<StatisticsDTO, WriteTracking> {}
    class StatisticsAggregationSearchRequest  extends SearchRequest<StatisticsAggregationDTO, api.NoTracking> {}


    class SliceTrackingCrudRequest      extends CrudSurrogateKeyRequest<SliceTrackingRef, SliceTrackingDTO, FullTrackingWithVersion> {}
    class SliceTrackingSearchRequest    extends SearchRequest<SliceTrackingDTO, FullTrackingWithVersion> {}

    class GetNextTimeSliceResponse extends ServiceResponse {
        required Instant(0)             startInstant;
        required Instant(0)             endInstant;
    }

    /**
     * Moves the tracking forward to the provided "asOf" instant and returns the previous one.
     * This determines the interval to be processed as oldAsOf <= t < asOf
     *  */
    class GetNextTimeSliceRequest extends RequestParameters return GetNextTimeSliceResponse {
        required (SliceTrackingKey)     sliceTrackingKey;       // the key of the record
        optional Instant(3)             overrideEndInstant;     // end of the interval, will be stored as the new date in the table. If null, the context's executionStart will be used
        optional f42Ref                 sinkRef;                // sinkRef to be written to, if known, for maintenance and documentation purposes
    }

    /**
     * Aggregate data of StatisticsDTO into StatisticsAggregationDTO.
     */
    class AggregateMessageStatisticsRequest extends AbstractAggregationRequest {
    }

    class RecordEventsRequest extends RequestParameters {
        required Ascii(8)             eventSource;     // unique identifier per source
        required Enum EventSeverity   eventSeverity;   // event level
        optional Uuid                 id1;             // event specific ID 1
        optional defaultExternalId    id2;             // event specific ID 2
        required Ascii(8)             status;          // status value
        optional shortText            statusMessage;   // additional text
    }

    class RecordEventsCrudRequest      extends CrudSurrogateKeyRequest<RecordEventsRef, RecordEventsDTO, WriteTracking> {}
    class RecordEventsSearchRequest    extends SearchRequest<RecordEventsDTO, WriteTracking> {}

}
