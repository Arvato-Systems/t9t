/*
 * Copyright (c) 2012 - 2025 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import t9t.base.types.*
import t9t.base.api.*
import t9t.base.entities.*
import t9t.base.output.*
import t9t.base.search.*
import t9t.base.crud.*
import t9t.batch.*
import t9t.plugins.*

package (com.arvatosystems) t9t.plugins.request {
    default private unsigned trim noControlChars;
    properties inherited, serialized, ref;

    /**
     * Request to query loaded plugins
     * (only returns active entries)
     * */
    class LoadedPluginSearchRequest extends SearchRequest <LoadedPluginDTO, FullTrackingWithVersion> {}
    class LoadedPluginCrudRequest   extends CrudSurrogateKeyRequest <LoadedPluginRef, LoadedPluginDTO, FullTrackingWithVersion> {}

    class PluginLogSearchRequest    extends SearchRequest <PluginLogDTO, WriteTracking> {}
    class PluginLogCrudRequest      extends CrudSurrogateKeyRequest <PluginLogRef, PluginLogDTO, WriteTracking> {}

    class UploadPluginRequest       extends RequestParameters return UploadPluginResponse {
        required shortText          description;        // documentation
        required binary(8000000)    jarFile;            // the JAR file image
    }

    /** Uploads and installs a plugin. Plugins loaded this way will NOT be persisted in the LoadedPlugins entity. These are just for temporary code changes. */
    class UploadPluginResponse      extends ServiceResponse {
        required (PluginInfo)       pluginInfo;
    }

    /** Unloads a plugin. Plugins unloaded this way will NOT be removed from the LoadedPlugins entity. These are just for temporary code changes. */
    class UnloadPluginRequest       extends RequestParameters {
        required pluginId           pluginId;
    }

    /** Generic output parameter for request handler plugins. */
    class ExecutePluginV1Response extends ServiceResponse {
        optional f42Ref             refResult;
        optional Long               numResult;
        optional defaultExternalId  idResult;
        optional shortText          textResult;
        optional Json               mapResult;
    }
    /** Execute some function loaded by plugin. */
    class ExecutePluginV1Request extends RequestParameters return ExecutePluginV1Response {
        required pluginApiQualifier qualifier;        // the qualifier of the invoked plugin (the pluginApiId will always be "requestHandler")
        optional f42Ref             refParameter;
        optional Long               numParameter;
        optional defaultExternalId  idParameter;
        optional shortText          textParameter;
        optional Json               mapParameter;
    }
}
