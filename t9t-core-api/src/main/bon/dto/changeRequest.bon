/*
 * Copyright (c) 2012 - 2025 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import apiw.*
import t9t.base.types.*

package (com.arvatosystems) t9t.changeRequest {
    properties serialized, compact2,
        dropdown is com.arvatosystems.t9t.annotations.UseDropDownInUI(),
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable;

    enum ChangeWorkFlowStatus {
        WORK_IN_PROGRESS                 = "W",
        TO_REVIEW                        = "R",
        APPROVED                         = "A",
        REJECTED                         = "J",
        ACTIVATED                        = "V",
        CONFLICT                         = "C"
    }

    class DataChangeRequestRef extends Ref {}
    class DataChangeRequestKey extends DataChangeRequestRef {
        required pqon                       pqon;
        required shortText                  changeId;
        required object                     key properties serialized;
    }

    /** Used for approval workflow for data change requests (mainly config data) */
    class DataChangeRequestDTO extends DataChangeRequestRef {
        required pqon                               pqon properties notupdatable;               // data (table) class PQON for which the change is requested
        required t9tShortId                         changeId properties notupdatable;           // a unique identifier of the change
        required object                             key properties notupdatable, serialized, compact2; // primary key of the data object which is being changed
        optional Object                             data properties serialized, compact2;       // the intended data object after the change (null in case of deletion)
        required enum ChangeWorkFlowStatus          status;                                     // current status of the change work flow
        required userId                             userIdCreated;                              // user who initiated the change
        required instant                            whenCreated;                                // when the change was initiated
        required userId                             userIdModified;                             // user who last modified the change
        required instant                            whenLastModified;                           // when the change was last modified
        optional userId                             userIdSubmitted;                            // user who submitted the change for approval
        optional Instant                            whenSubmitted;                              // when the change was submitted for approval
        optional Unicode(255) allowControlChars     textSubmitted;                              // description of the changes, entered by the submitter
        optional userId                             userIdApprove;                              // user ID who has approved (or rejected) the approval
        optional Instant                            whenDecided;                                // when the decision was made (approval or rejection)
        optional Unicode(255) allowControlChars     textDecision;                               // additional explanation for the decision
        optional userId                             userIdActivated;                            // user ID who has activated (move the change to live table) the change
        optional Instant                            whenActivated;                              // when the change was activated
    }

    class ChangeWorkFlowConfigRef extends Ref {}
    class ChangeWorkFlowConfigKey extends ChangeWorkFlowConfigRef {
        required pqon                       pqon;
    }

    /** Configure the PQON of table which need approval work flow for new changes */
    class ChangeWorkFlowConfigDTO extends ChangeWorkFlowConfigRef {
        required pqon                       pqon properties notupdatable, dropdown="cfgPqon";   // data (table) class PQON for which change work flow is needed
        required boolean                    approvalRequiredForCreate;                          // if true, approvals are required to create new records
        required boolean                    approvalRequiredForUpdate;                          // if true, approvals are required to update records
        required boolean                    approvalRequiredForDelete;                          // if true, approvals are required to delete records
        required boolean                    approvalRequiredForDeactivation;                    // If true, deactivations will be submitted for approval as "UPDATE" requests with the only change setting "isActive" to false.
        required boolean                    approvalRequiredForActivation;                      // If true, activations will be submitted for approval as "UPDATE" requests with the only change setting "isActive" to true.
        required boolean                    separateActivation;                                 // If true, activation must be manually triggered
        required boolean                    privateChangeIds;                                   // If true, then only the user who submitted a change can make further changes to it or resubmit it. Otherwise, everyone with change permissions can work on any pending change.
        required boolean                    enforceFourEyes;                                    // If true, then every change must be approved by a different user than the one who submitted it.
    }
}
