/*
 * Copyright (c) 2012 - 2020 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import meta.*
import apiw.*
import t9t.base.types.*
import t9t.base.api.*

package (com.arvatosystems) t9t.plugins {
    default private unsigned trim noControlChars;
    properties inherited, serialized, ref, active,
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable,
        tenantCategory is com.arvatosystems.t9t.annotations.TenantCategory();

    type pluginId                   is Unicode(32);
    type pluginApiId                is Ascii(16);
    type pluginApiQualifier         is Ascii(16);
    type pluginVersion              is Ascii(16);

    class PluginInfo {
        required pluginId           pluginId;
        required pluginVersion      version;
    }

    class PluginMethodInfo {
        required pluginApiId        implementsApi;    // qualifier of the implemented API
        optional pluginApiQualifier qualifier;        // the qualifier, for multi-slot type APIs
        required int                versionMajor;     // major version implemented - must match exactly
        required int                versionMinMinor;  // requires at least this minor version
    }

    /** Information used internally for the key into the map of available plugins. */
    final immutable class StoredPluginKey {
        required f42Ref             tenantRef;        // either global tenantRef, if the method is available for all tenants, or a specific tenant's ref
        required pluginId           pluginId;         // qualifier of the implemented API
    }
    /** Information used internally for the key into the map of available methods, loaded by plugins. */
    final immutable class StoredPluginMethodKey {
        required f42Ref             tenantRef;        // either global tenantRef, if the method is available for all tenants, or a specific tenant's ref
        required pluginApiId        implementsApi;    // qualifier of the implemented API
        optional pluginApiQualifier qualifier;        // the qualifier, for multi-slot type APIs
        //required int                versionMajor;     // major version implemented - must match exactly
    }


    class LoadedPluginRef RTTI 92 extends Ref {
    }

    final class LoadedPluginKey extends LoadedPluginRef {
        required pluginId           pluginId            properties notupdatable;
    }

    /**
     * DTO for configuration table for loaded plugins.
     * Entries will be deleted (or deactivated) when a plugin is removed.
     * There can be only a single entry per pluginId per tenant at the same time.
     *
     */
    class LoadedPluginDTO extends LoadedPluginRef {
        properties tenantCategory="D";
        required boolean            isActive            properties active;
        required Integer            priority            properties notupdatable;   // defines the sequence of loading. Can not be rearranged
        required pluginId           pluginId            properties notupdatable;
        required pluginVersion      pluginVersion;
        required shortText          description;              // documentation
        required Instant            whenLoaded;
        required binary(8000000)    jarFile;            // the JAR file image
    }

    class PluginLogRef RTTI 93 extends Ref {
    }

    /**
     * DTO for logging table for loaded plugins.
     */
    class PluginLogDTO extends PluginLogRef {
        properties tenantCategory="I";
        required boolean            isActive            properties active;
        required Integer            priority            properties notupdatable;   // defines the sequence of loading. Can not be rearranged
        required pluginId           pluginId            properties notupdatable;
        required pluginVersion      pluginVersion;
        required Instant            whenLoaded;
        optional Instant            whenRemoved;
    }
}
