/*
 * Copyright (c) 2012 - 2025 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.*
import t9t.base.types.*
import t9t.base.entities.*
import t9t.base.output.*
import t9t.base.api.*

import t9t.base.crud.*
import t9t.base.search.*

import t9t.bpmn2.*

/**
 * BPM 2.0 API module
 */
package (com.arvatosystems) t9t.bpmn2.request {
    default private unsigned trim noControlChars;
    properties inherited,
        tenantCategory is com.arvatosystems.t9t.annotations.TenantCategory(),
        searchprefix is com.arvatosystems.t9t.annotations.SearchPrefix(),
        serialized is com.arvatosystems.t9t.annotations.StoreSerialized,
        noAutoMap is com.arvatosystems.t9t.annotations.NoAutoMap,
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable,
        ref is com.arvatosystems.t9t.annotations.IsObjectRef;

    class Bpmn2MessageQueueCrudRequest          extends CrudSurrogateKeyRequest<Bpmn2MessageQueueRef, Bpmn2MessageQueueDTO, FullTrackingWithVersion> {}

    class ProcessDefinitionSearchRequest        extends SearchRequest<ProcessDefinitionDTO, FullTrackingWithVersion> { }
    class ProcessInstanceSearchRequest          extends SearchRequest<ProcessInstanceDTO, NoTracking> { }
    class EventSubscriptionSearchRequest        extends SearchRequest<EventSubscriptionDTO, NoTracking> { }
    class IncidentSearchRequest                 extends SearchRequest<IncidentDTO, NoTracking> { }
    class Bpmn2MessageQueueSearchRequest        extends SearchRequest<Bpmn2MessageQueueDTO, FullTrackingWithVersion> {}


    /**
     * Deploy new process definition.
     */
    class CreateDeploymentRequest extends RequestParameters return CreateDeploymentResponse {
        optional bpmnName                                   deploymentName;     // Name of deployment for information purpose
        required (DeploymentResourceDTO) required List<>    resources;          // Deployment resources
    }
    class DeploymentResourceDTO {
        required bpmnName               name;               // Resource name (e.g. filename) - might be used to determine resource type by its extension
        required Binary(1048576)        data;               // Resource data
    }
    class CreateDeploymentResponse extends ServiceResponse {
        optional bpmnId                 deploymentId;
    }


    /**
     * Delivery a message for process start and/or to continue processes
     */
    class DeliverMessageRequest extends RequestParameters {
        required bpmnName               messageName;        // Message name to trigger in BPMN
        optional bpmnName               businessKey;        // Business key on process instance level for target selection
        required Element Map<String>    variables;          // Variables to set on target process
        optional Boolean                doNotQueue;         // By default, a failed delivery will be queued for delivery retries. With FALSE, this message will not be queued in case of failures
    }


    /**
     * Execute pending jobs.
     *
     * This is an alternative of the BPMN job executor for test use or forced execution. Normally this is not needed.
     */
    class ExecuteJobsRequest extends RequestParameters return ExecuteJobsResponse {
        optional bpmnId                 processDefinitionKey;       // Only execute jobs of given process definition key
        optional bpmnId                 processInstanceId;          // Only execute jobs of given process instance id
        required boolean                runFailedJobs;              // Normally, only non-failed jobs are run. If provided with TRUE, all failed jobs with no retry left are executed.
    }
    class ExecuteJobsResponse extends ServiceResponse {
        required int jobsSuccessfull;
        required int jobsFailedRetriesLeft;
        required int jobsFailedNoRetriesLeft;
    }

    /**
     * Perform delivery of queued BPMN2 messages (Bpmn2MessageQueueDTO).
     */
    class PerformBpmn2MessageDeliveryRequest extends RequestParameters {
        optional (Bpmn2MessageQueueRef...)      messageQueueRef;    // If provided, only perform delivery of given message queue entry. (Regardless of its nextDelivery.)
        optional Integer                        messageChunkSize;   // If provided, limit messaged acquired from queue table to provided count.
    }
}
