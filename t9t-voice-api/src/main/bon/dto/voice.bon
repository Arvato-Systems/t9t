/*
 * Copyright (c) 2012 - 2018 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.*
import apiw.*
import api.media.*
import api.alexa.*
import de.jpaw.bonaparte.api.*
import t9t.base.types.*
import t9t.base.entities.*
import t9t.base.output.*
import t9t.base.moduleCfg.*

/** Configuration data for voice controlled self service (Alexa, Siri, ...)
 */
package (com.arvatosystems) t9t.voice {
    default private unsigned trim noControlChars;
    properties inherited,
        tenantCategory is com.arvatosystems.t9t.annotations.TenantCategory(),
        searchprefix is com.arvatosystems.t9t.annotations.SearchPrefix(),
        serialized is com.arvatosystems.t9t.annotations.StoreSerialized,
        noAutoMap is com.arvatosystems.t9t.annotations.NoAutoMap,
        notupdatable is com.arvatosystems.t9t.annotations.NotUpdatable,
        dropdown is com.arvatosystems.t9t.annotations.UseDropDownInUI(),
        ref is com.arvatosystems.t9t.annotations.IsObjectRef;

    type voiceExternalId            is Unicode(255);   // external identifier for applications or users

    enum VoiceProvider {
        ALEXA             = "A",
        SIRI              = "S",
        GOOGLE            = "G"
    }

    /** Extended tenant configuration for data exceeding the generic tenant configuration of the application server.
     * Records of this entity share the same artifical primary key tenantRef.
     */
    class VoiceModuleCfgDTO RTTI 2001 extends ModuleConfigDTO {
        properties                                  tenantCategory="D";                                 // if entry missing, get the global one
    }

    /** Maps external technical application IDs (usually UUID based) to specific (human readable) names. */
    class VoiceApplicationRef extends Ref {}

    final class VoiceApplicationKey extends VoiceApplicationRef {
        required t9tShortId                         applicationId   properties notupdatable;
    }

    class VoiceApplicationDTO extends VoiceApplicationRef {
        properties tenantCategory="A";
        required t9tShortId                         applicationId   properties notupdatable;
        required boolean                            isActive        properties active;
        required shortText                          name;                   // Some name or description of the setup
        required enum VoiceProvider                 provider;
        required voiceExternalId                    providerId;             // the ID assigned and sent by the provider
        required Uuid                               apiKey;                 // the API key to use for interaction for this provider
        required boolean                            sessionPerExtSession;   // if true, every remote session will be mapped to its own internal session. Set to false for info only sessions
    }

    /** Maps external user IDs (usually UUID based) to internal IDs, for example Alexa userIds to customer IDs in your application (OMS etc.). */
    class VoiceUserRef extends Ref {}

    final class VoiceUserKey extends VoiceUserRef {
        required (VoiceApplicationRef...)           applicationRef  properties ref, dropdown="applicationId";  // for which application is this association?
        required voiceExternalId                    providerId      properties notupdatable;
    }

    final class VoiceUserInternalKey extends VoiceUserRef {
        required f42Ref                             applicationRef  properties ref, dropdown="applicationId";  // for which application is this association?
        required voiceExternalId                    providerId;             // the ID assigned and sent by the provider
    }

    class VoiceUserDTO extends VoiceUserRef {
        properties tenantCategory="A";
        required voiceExternalId                    providerId      properties notupdatable;  // the ID assigned and sent by the provider
        required defaultExternalId                  internalId;
        required boolean                            isActive        properties active;
        required shortText                          name;                   // Some name or description of the setup
        required (VoiceApplicationRef..., VoiceApplicationKey) applicationRef  properties ref, dropdown="applicationId", searchprefix="application";  // for which application is this association?
        optional Integer                            providerIdHash;         // a hash for the DB index, because provider IDs tend to be long. Will be computed internally
        // TODO: additional fields for authentication state
    }

    class VoiceResponseRef extends Ref {}

    final class VoiceResponseKey extends VoiceResponseRef {
        required (VoiceApplicationRef...)           applicationRef  properties ref, dropdown="applicationId";  // for which application is this association?
        required languageTag                        languageCode;
        required t9tShortId                         key;
    }
    final class VoiceResponseInternalKey extends VoiceResponseRef {
        required f42Ref                             applicationRef  properties ref, dropdown="applicationId";  // for which application is this association?
        required languageTag                        languageCode;
        required t9tShortId                         key;
    }
    class VoiceResponseDTO extends VoiceResponseRef {
        required (VoiceApplicationRef..., VoiceApplicationKey) applicationRef  properties ref, dropdown="applicationId", searchprefix="application";  // for which application is this association?
        required languageTag                        languageCode;
        required t9tShortId                         key;            // key by which this text in invoked
        required boolean                            isTemplate;     // if true, must be processed by freemarker, else verbatim text
        required boolean                            isSsml;         // if true uses speech markup language
        required Unicode(30000) allowControlChars   text;
    }
}
