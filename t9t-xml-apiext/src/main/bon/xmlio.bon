/*
 * Copyright (c) 2012 - 2023 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Package which contains the definitions of t9t XML interfaces.
 */
package (com.arvatosystems) t9t.xml XML PROPERTY bundle t9t.config swagger {
    default private unsigned trim noControlChars;
    properties path;

    // general ISO types
    type countryCode            is Uppercase(2..2);             // ISO 3166
    type currencyCode           is Uppercase(3..3);             // ISO 4217
    type languageCode           is Ascii(2..5);                 // 2 lowercase plus optional _ + 2 uppercase

    // basic types
    type shortId                is Ascii(16);                   // internal identifiers, normally ASCII
    type longId                 is Unicode(20);                 // external identifiers, could hold the string representation of a UUID. Normally ASCII
    type externalId             is Unicode(36);                 // external identifiers, could hold the string representation of a UUID. Normally ASCII
    type shortText              is Unicode(80);                 // name or description

    type userId                 is shortId;                     // external user Id
    type roleId                 is shortId;                     // role for user permissions
    type emailAddress           is Unicode(255);                // an email address
    type timeZoneId             is Unicode(64);                 // IANA time zone Id

    /** request a reply. */
    final class Ping xmlRoot {
        properties path = "ping";
        optional Integer                            pingId example "7474001";   // some optional number to uniquely define this instance of the ping request
    }

    /** Common response header for all error messages, and some requests except authentication. */
    final class GenericResult xmlRoot {
        required Long                               processRef;                 // reference to execution entry
        required int                                returnCode;                 // execution response code, < 2,000,000,000 for technically correctly processed responses
        optional Unicode(512)                       errorDetails;               // a data parameter which allows to localize the error condition (offending field / parameter name etc.)
        optional Unicode(512)                       errorMessage;               // optional lookup of the returnCode as a standard text message, as defined in ApplicationException and derived classes. Only for convenience, may be translated to the requester's language.
        optional Long                               objectRef;                  // technical ID
        optional externalId                         objectId;                   // object identifier
        optional Integer                            count;                      // integral numeric result
        optional Uuid                               id;                         // UUID
        optional shortText                          description;                // description
        optional Unicode(255)                       fieldName;                  // in case of validation errors, this field can contain the name of the offending field
        optional Unicode(255)                       className;                  // in case of validation errors, this field can contain the name of the class containing the offending field
    }

    /** Common response header for all error messages, and some requests except authentication. */
    final class PreviousResult xmlRoot {
        required boolean                            completedCheckedRequest;
        optional Integer                            returnCodeOfCheckedRequest;
    }

    /** User I/O record. For security reasons, fields of the PermissionsDTO components cannot be imported. */
    final class User001 {
        required userId                             userId;                     // User ID, to be used for login
        required shortText                          name;                       // Christian name, surname, or description
        optional emailAddress                       emailAddress;               // email address of user, if known
        optional Boolean                            isActive;                   // defaults to true
        optional roleId                             roleId;                     // reference a role if that is the only allowed role for this user
        optional Boolean                            isTechnical;                // defaults to false
        optional shortText                          office;                     // address
        optional shortText                          department;                 // department
        optional shortText                          jobTitle;                   // for signature of emails
        optional shortText                          phoneNo;                    // phone no (landline)
        optional shortText                          mobilePhoneNo;              // phone no (mobile)
        optional Boolean                            externalAuth;               // set to true for LDAP or other external authentication source
        optional userId                             supervisorId;               // User ID of the supervisor (optional)
        optional Json                               z;                          // for custom extensions
    }

    /** IMPORT/EXPORT API: User master data. */
    final class UserMaster xmlRoot {
        required (User001) required List<>          records;                    // the list of one or multiple user records
    }

    final class ErrorDescription001 {
        required int                                returnCode;                 // return code
        required Unicode(512)                       errorMessage;               // Explaining text (in English)
        optional Unicode(255)                       applicationLevel;           // application level
        optional Unicode(255)                       moduleDescription;          // module description
    }

    final class ErrorDescriptionList xmlRoot {
        required (ErrorDescription001) required List<> records;                 // the list of possile return codes
    }
}
