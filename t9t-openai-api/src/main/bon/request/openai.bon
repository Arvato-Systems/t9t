/*
 * Copyright (c) 2012 - 2023 Arvato Systems GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import api.media.*
import t9t.base.types.*
import t9t.base.api.*
import t9t.ai.*
import t9t.ai.openai.*

package (com.arvatosystems) t9t.ai.openai.request {
    default private unsigned trim noControlChars;

    /** Simple request with one optional parameter. */
    class OpenAIListModelsRequest extends RequestParameters return OpenAIListModelsResponse {
        optional modelId                            onlyModel;
        optional Boolean                            sortByName;
        optional Boolean                            sortByDate;
    }

    class OpenAIListModelsResponse extends ServiceResponse {
        required (AIModel) required List<>          models;
    }

    final class AIModel {
        required modelId                            modelId;
        required Instant                            whenCreated;
        optional shortText                          owner;
    }

    /** Simple chat completion request for testing. */
    class OpenAIChatCompletionRequest extends RequestParameters return OpenAIObjectChatCompletionResponse {
        required (OpenAIChatCompletionReq)          request;
        required meta.identifier List<>             toolSelection;
        optional Integer                            numberOfToolCalls;
    }

    class OpenAIObjectChatCompletionResponse extends ServiceResponse {
        required (OpenAIObjectChatCompletion)       response;
    }


    class OpenAISimpleRequest extends RequestParameters return OpenAISimpleResponse {
        required openaiText                         question;
    }

    class OpenAISimpleResponse extends ServiceResponse {
        required openaiText                         answer;
    }


    /** Uploads a file to OpenAI. It is recommended to store a filename with appropriate extension in the z map of the MediaData, using the key filename. */
    class OpenAIUploadFileRequest extends RequestParameters return OpenAIUploadFileResponse {
        required enum OpenAIPurposeType             purpose;
        required (MediaData)                        content;
    }

    class OpenAIUploadFileResponse extends ServiceResponse {
        required (OpenAIObjectFile)                 file;
    }

    class OpenAICreateEmbeddingsRequest extends RequestParameters return OpenAICreateEmbeddingsResponse {
        required (OpenAICreateEmbeddingsReq)        request;
    }

    class OpenAICreateEmbeddingsResponse extends ServiceResponse {
        required (OpenAIObjectCreateEmbeddings)     response;
    }
}
